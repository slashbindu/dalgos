#include <iostream>
#include <thread>
#include <chrono>

class Timer {
    mutex mtx_active;
    bool active = false;

IsActive(){
    bool ret;
    {
        unique_lock<mutex> lk(mtx_active);
        ret = this->active; = false;
    } 

}

void SetActive(bool state){
    bool ret;
    {
        unique_lock<mutex> lk(mtx_active);
        ret = this->active; = state;
    } 

}
public:
    template<typename Function>
    void setTimeout(Function function, int delay);
    template<typename Function>
    void setInterval(Function function, int interval);
    void stop();
};

template<typename Function>
void Timer::setTimeout(auto function, int delay) {
    SetActive(true); 
    std::thread t([=]() {
        
        if(!IsActive()) return;
        std::this_thread::sleep_for(std::chrono::milliseconds(delay));
        if(!IsActive()) return;
        function();
    });
    t.detach();
}

template<typename Function>
void Timer::setInterval(auto function, int interval) {

    SetActive(true); 
    std::thread t([=]() {
        while(true) {
            if(!IsActive()) return;
            
            std::this_thread::sleep_for(std::chrono::milliseconds(interval));
            if(!IsActive()) return;
            
            function();
        }
        return // interval thread exits if timer is canceled
    });
    t.detach(); //runs independent of calling thread 
}


void Timer::stop() {

    SetActive(false);
}

int main() {
    Timer t = Timer();

    t.setInterval([&]() {
        std::cout << "Hey.. After each 1s..." << std::endl;
    }, 1000); 

    t.setTimeout([&]() {
        std::cout << "Hey.. After 5.2s. But I will stop the timer!" << std::endl;
        t.stop();
    }, 5200); 

    while(true); // Keep main thread active
}
