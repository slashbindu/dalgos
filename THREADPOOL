#include<iostream>
#include<atomic>
#include<thread>
#include<mutex>
#include<condition_variable>
#include<queue>
#include<vector>

using namespace std;

class threadpool {
    private:
    int max_threads;
    int max_tasks;
    vector<thread>  m_threads;
    deque<int>  m_queu_task; 
    mutex m_mtxqueue;
    condition_variable m_cv_qready;
    condition_variable m_cv_empty;
    
    public:
       threadpool() {
        max_threads =  std::thread::hardware_concurrency();
        for( auto i = 0; i < max_threads; i++){
            m_threads.emplace_back(std::thread([this]() {
            //m_threads.emplace(std::thread([this]() {
                     while(1) {
                 
                        int n = dequeu_task();
                        if(n == 0) {
                            break;
                        }
                        cout << endl << "task#  " << n << endl;
                    }
            }));
        }
     }
     void enqueu_task(int n){
        
        unique_lock<mutex> lk(m_mtxqueue);
        m_cv_empty.wait(lk, [this] (){ return(m_queu_task.size() != max_tasks);});
        m_queu_task.push_back(n);
        m_cv_qready.notify_one();
    }
    
    int dequeu_task(){
        
        unique_lock<mutex> lk(m_mtxqueue);
        m_cv_qready.wait(lk, [this] (){ return(m_queu_task.size() != 0); });
        int ret = m_queu_task.front();
        m_queu_task.pop_front();
    
         if(! m_queu_task.size())
            m_cv_empty.notify_one();
         return ret;
    }
     
    ~ threadpool() {
        m_queu_task.push_back(0);
        for(auto& t : m_threads) {
            t.join();
        }
    }
};


int main(void){
{
     threadpool pool;
    for(int i = 1; i <= 10; ++i)
        pool.enqueu_task(i);
    }
    return 1;
}
