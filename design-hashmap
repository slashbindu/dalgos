/*
Design a HashMap without using any built-in hash table libraries.

Implement the MyHashMap class:

    MyHashMap() initializes the object with an empty map.
    void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
    int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
    void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.

Input
["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]
[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
Output
[null, null, null, 1, -1, null, 1, null, -1]

Explanation
MyHashMap myHashMap = new MyHashMap();
myHashMap.put(1, 1); // The map is now [[1,1]]
myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]

Constraints:

    0 <= key, value <= 106
    At most 104 calls will be made to put, get, and remove.


*/

using namespace std;

struct  node {
  
    int key, val;
    node *next;
     
    node(int k, int v, node* n) {
        key = k;
        val = v;
        next = n;
    }
   
};

class MyHashMap {
    
    const static int m_size = 10000;
    node* m_data[m_size];
 
    
   
public:
      MyHashMap() {
        
       memset(m_data, NULL, sizeof(m_data));
         
    }
   
    
    int hash(int key) {
        return (int)((long)key % m_size);
    }
    
    void put(int key, int value) {
        
       
        int dind = hash(key);
        node* fndnode = NULL;
        fndnode = m_data[dind];
        if(fndnode) {
            // just update the value ?
            remove(key);    
        }
        
        fndnode =  m_data[dind];
        // most recent insert stays at from of the list 
        node* newnode = new node(key, value, fndnode);
        //newnode->setnode(key, value, fndnode);
         m_data[dind] = newnode;
    }
    
    int get(int key) {
        
        int dind = hash(key);
        node* fndnode =  m_data[dind];

       while(fndnode != NULL){
            
            if(fndnode->key != key){
                fndnode = fndnode->next;
            } else {
                return fndnode->val;
            }
        }
         
        return -1;
    }
    
    void remove(int key) {
        
        int dind = hash(key);
        node* fndnode =  m_data[dind];
        if(!fndnode) return;
        
        if (fndnode->key == key) {
            m_data[dind] = fndnode->next;
            delete fndnode;
        } else {
            while( fndnode && fndnode->next) {
                if(fndnode->next->key == key) {
                    node * node = fndnode->next;
                    fndnode->next = fndnode->next->next;
                    delete node;
                    break;
                }
                fndnode = fndnode->next;
            }
       }
    }
};

/**
 *  MyHashMap object will be instantiated and called as such:
 * MyHashMap* obj = new MyHashMap();
 * obj->put(key,value);
 * int param_2 = obj->get(key);
 * obj->remove(key);
 */
