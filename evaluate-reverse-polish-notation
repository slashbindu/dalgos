/*
Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, and /. Each operand may be an integer or another expression.

Note that division between two integers should truncate toward zero.

It is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.

 

Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9

Example 2:

Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6

*/

using namespace std;
class Solution {
public:
    
    stack<int> stk;
    
    int notoperator(string token){
          return( (token != "+") &&  (token != "-") &&
            (token != "/")  &&  (token != "*") );
                       
    }
    
    int apply_operand(char opr, int op1, int op2){
        
        int result = 0;
        if (opr == '+') {
            result = op1 + op2;
        
        } else if (opr == '-') {
            result =  op1 - op2;
        } else if (opr == '*'){
            result = op1 * op2;
        } else if (opr == '/') {
            result = op1 / op2;
            
        }
        return result;
    }
    
    int evalRPN(vector<string>& tokens) {
        
        int n = tokens.size();
        if(!n) {
            return 0;
        }
        
        int result = 0;
        int i = 0;
        int operand, operand1, operand2;
        operand = operand1 =  operand2 = 0;
        char pfoperator;
        while( i < n){
            
            if(notoperator(tokens[i]) )
            {
                operand = stoi(tokens[i].c_str());
                stk.push(operand);
            } else {
                operand2 = stk.top();
                stk.pop();
                operand1 = stk.top();
                stk.pop();
                
                pfoperator = tokens[i][0];
                                           
                result = apply_operand(pfoperator, operand1, operand2);
                stk.push(result);
           
            }
            i++;
        }
        result = stk.top();
        stk.pop();
        return(result);
        
     }
};
