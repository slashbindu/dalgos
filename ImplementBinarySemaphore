

#include<iostream>
#include<thread>
#include<mutex>
#include<condition_variable>

using namespace std;

class semaphore {

   int m_maxcnt; 
   int m_cnt;
   mutex m_cnt_mtx;
   condition_variable cv_enter;
   
   public:

    semaphore(int max) {
        m_maxcnt = max;
	m_cnt = m_maxcnt;
   }


    void sem_wait(){
    //decrement the semaphore value by one 
   // If the value of a semaphore is currently zero, then a sem_wait  will block until the value becomes greater than zero. 
    
      unique_lock<mutex> lk(m_cnt_mtx);
     	cv_enter.wait(lk, [this] () { return( m_cnt > 0);} );
    
     	if(m_cnt) {
    		m_cnt--;	
     	}
   }

   void sem_post() {
   //Increment the semaphore value by one
      unique_lock<mutex> lk(m_cnt_mtx);
      if(m_cnt < m_maxcnt){
          m_cnt ++;
      }
      cv_enter.notify_one();
       
   }

};


void do_work(class semaphore  *mysem ){
    
    thread::id this_id = this_thread::get_id();
    
    //can i enter ?
    mysem->sem_wait();
    
    auto start = std::chrono::system_clock::now();
    cout << "I am  IN #: " << this_id << endl;
    
    auto end = std::chrono::system_clock::now();
    std::chrono::duration<double> diff = end - start;
       
    cout << this_id << "#:  Done Elapsed duration:" << diff.count() << endl;
 
    mysem->sem_post();
  }


int  main(void) {
    //create a bianry semaphore
    semaphore  mysem(1); 

    thread t1(do_work, &mysem);
    thread t2(do_work, &mysem);
   
    t1.join();
    t2.join();
    
    return 0;
 
}
