#include <iostream>

using namespace std;
class Trienode {
   public:
    Trienode *children[26];
    bool end_key;
    char letter;
    
    Trienode(){
        
        for(int i =0; i < 26; i++){
            children[i] = NULL;
    
        }
        end_key = false;
        letter = '\0';
    }       
};

class  Trie{
    
    Trienode m_root;
    public:
    void Insert (string str) {
  
        Trienode *current = &m_root;
        for (size_t i = 0; i < str.size(); i++) {
            
            if(!current->children[str.at(i)-'a']) {
                
               current->children[str.at(i)-'a'] = new Trienode;
               current->children[str.at(i)-'a']->letter = str[i];
             }
            current = current->children[str.at(i)-'a'];
        }
        current->end_key = true;
    }
   
    Trienode* Search (string str) {
        
        Trienode *current = &m_rootans;
        for(size_t i=0; i< str.size(); i++) {
            
            if(current->children[str.at(i)-'a']) {
                current = current->children[str.at(i)-'a']; 
            } else {
                current = NULL;
                break;
            }
        }
        /*
        if(current->end_key == true){
            NodeFnd = current;
        }*/
            
        return current;
    }
    
     // Print the words with the specified prefix in lexical order
    //void PrintLexical (TrieNode* current, string prefix, string suffix) {}
    
    string longestPrefixWord(vector<string>& words) {
        Trie* trie = new Trie();
        for (auto w : words) trie->insert(w);
        string ans = "";
        for (auto w : words) {
            if (ans != "" && (ans.size() > w.size() || (ans.size() == w.size() && ans < w))) continue;
            if (trie->search(w)) ans = w;
        }
        return ans;
    }

};
