
/*
Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

    LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
    int get(int key) Return the value of the key if the key exists, otherwise return -1.
    void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. 
    If the number of keys exceeds the capacity from this operation, evict the least recently used key.

The functions get and put must each run in O(1) average time complexity.

 

Example 1:

Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]
*/
using namespace std; 

class LRUCache {
public:
    
    map<int, list<pair<int, int>>::iterator> m_cachemap;
    list<pair<int, int>> m_lrulist;

    int m_maxcapacity;
    
    LRUCache(int capacity) {
        m_maxcapacity = capacity;
                    
    }
    
    int get(int key) {
        auto mitr =   m_cachemap.find(key);
        if(mitr != m_cachemap.end()) {
            
            m_lrulist.splice( m_lrulist.begin(), m_lrulist, mitr->second);
            return( mitr->second->second);
          
        } else {
            return -1;
        }
    }
    
    void put(int key, int value) {
        
        auto mitr =  m_cachemap.find(key);
        if (mitr !=  m_cachemap.end()) {
            // updateval and bring to front of list 
            mitr->second->second = value;
            m_lrulist.splice(m_lrulist.begin(), m_lrulist,  mitr->second);
            return;
        }
            
        if( m_cachemap.size() ==  m_maxcapacity) {
            //evict least recent key
            int delkey =  m_lrulist.back().first;
            m_cachemap.erase(delkey);
            m_lrulist.pop_back();
                         
        } 
        //first time insert
        m_lrulist.emplace_front(key, value);
        m_cachemap.emplace(key, m_lrulist.begin());
    }
        
          
        
    
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
